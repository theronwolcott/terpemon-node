<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Terp√©mon</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    #map {
      height: 100vh;
      width: 100%;
    }
  </style>
</head>
<body>
  <div id="map"></div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>
    // Get the latitude and longitude from the backend (via EJS)
    const userLat = <%= lat %>;
    const userLng = <%= lng %>;

    // Initialize the map with a fallback if lat/lng is 0 (or any default)
    const map = L.map('map').setView([userLat || 0, userLng || 0], 14); // Use either provided lat/lng or fallback
  
    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    getLocation();

  // Function to calculate the tile's aligned position based on a fixed 0.02-degree grid
  function alignToGrid(coord, tileSize) {
    return Math.floor(coord / tileSize) * tileSize;
  }

  // Function to draw tiles
  function drawTiles(centerLat, centerLng) {
    const tileSize = 0.02; // Each tile is 0.02 degrees wide/high

    // Align the user's position to the nearest tile grid
    const alignedLat = alignToGrid(centerLat, tileSize);
    const alignedLng = alignToGrid(centerLng, tileSize);

    // Loop through a 3x3 grid of tiles centered around the user's aligned tile
    for (let x = -1; x <= 1; x++) {
      for (let y = -1; y <= 1; y++) {
        // Calculate the bounds of each tile
        const latMin = alignedLat + y * tileSize;
        const latMax = latMin + tileSize;
        const lngMin = alignedLng + x * tileSize;
        const lngMax = lngMin + tileSize;

        // Create a rectangle for the tile
        L.rectangle([[latMin, lngMin], [latMax, lngMax]], {
          color: x === 0 && y === 0 ? 'blue' : 'red', // Highlight the center tile in blue
          weight: 1,
          fillOpacity: 0.1
        }).addTo(map);
      }
    }
  }
  
    // Function to add creature markers to the map
    function addCreatureMarkers(creatures) {
      creatures.forEach(creature => {
        const markerIcon = L.icon({
          iconUrl: `/images/species/${creature.id}.png`, // Assuming images are named after creature names
          iconSize: [70, 70], // Adjust size as needed
          iconAnchor: [35, 35], // Anchor at the bottom center
          popupAnchor: [0, -35] // Popup just above the icon
        });
  
        // Add marker to the map
        L.marker([creature.lat, creature.lng], { icon: markerIcon })
          .addTo(map)
          .bindPopup(`<b>${creature.name}</b>`); // Display creature name in the popup
      });
    }

    async function getLocation() {
        if (userLat != 0 && userLng != 0) {
            handleLocation(userLat, userLng);
        } else if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    const { latitude, longitude } = position.coords;
                    handleLocation(latitude, longitude);
                },
                (error) => {
                console.error('Error getting location:', error);
                alert('Unable to retrieve your location.');
                }
            );
        } else {
            alert('Geolocation is not supported by your browser.');
        }
    }

    async function handleLocation(latitude, longitude) {
        map.setView([latitude, longitude], 14); // Center the map at the user's location
  
        // Draw tiles based on the user's location
        drawTiles(latitude, longitude);

        try {
            const response = await fetch('/creatures/get-by-lat-lng', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                lat: latitude,
                lng: longitude,
                userId: 'user123' // Replace with the actual userId
            })
            });

            if (!response.ok) {
            throw new Error('Failed to fetch creatures');
            }

            const creatures = await response.json();
            addCreatureMarkers(creatures); // Add creatures to the map
        } catch (error) {
            console.error('Error fetching creatures:', error);
        }

    }
  
  </script>
  </body>
</html>
